rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // check if the user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // check if user is server member
    function isServerMember(serverId) {
      return isAuthenticated() && 
        (exists(/databases/$(database)/documents/servers/$(serverId)/members/$(request.auth.uid)) ||
         get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid);
    }
    
    // check if user is server owner
    function isServerOwner(serverId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid;
    }
    
    // Function to check if a request is only updating the servers array
    function isOnlyAddingServer(userId) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['servers']) &&
             request.auth.uid == userId;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      // User updates to their own document
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
      
      // User settings subcollection
      match /settings/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Server collection
    match /servers/{serverId} {
      // Anyone authenticated can read basic server info and create servers
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      
      // Only server owner can update or delete server info
      allow update, delete: if isServerOwner(serverId);
      
      // Server members subcollection
      match /members/{userId} {
        allow read: if isServerMember(serverId);
        // Only server owners can directly modify the members collection
        // Cloud Functions handle member joining with admin privileges
        allow create, update: if isServerOwner(serverId);
        allow delete: if isServerOwner(serverId) || isOwner(userId);
      }
      
      // Channels subcollection
      match /channels/{channelId} {
        allow read: if isServerMember(serverId);
        allow create, update, delete: if isServerOwner(serverId);
        
        // Messages in channels
        match /messages/{messageId} {
          allow read: if isServerMember(serverId);
          allow create: if isServerMember(serverId);
          allow update, delete: if request.auth.uid == resource.data.userId || isServerOwner(serverId);
        }
      }
    }
    
    // User servers collection (for quick access to servers a user belongs to)
    match /user_servers/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Server invitations collection
    match /serverInvites/{inviteCode} {
      // Anyone can read an invitation to validate it
      allow read: if isAuthenticated();
      
      // Only the server owner can create invitations
      allow create: if isAuthenticated() && isServerOwner(request.resource.data.serverId);
      
      // For updating, only allow server owners to modify invites
      // Cloud Functions handle invite usage tracking
      allow update: if isAuthenticated() && isServerOwner(resource.data.serverId);
    }
    
    // Deny access to everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}